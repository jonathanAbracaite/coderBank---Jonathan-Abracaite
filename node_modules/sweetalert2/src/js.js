

// ********* clases ************

// creación de objetos
class Usuario {
  constructor(DNI, nombre, contraseña, saldo, operaciones) {
    this.DNI = DNI;
    this.nombre = nombre;
    this.contraseña = contraseña;
    this.saldo = 0;
    this.operaciones = [];
  }
}

// ******* Objetos ************

/* ====================================
   ===          pantallas           ===
   ====================================
*/
// ******  variables *********
// obtención de pantallas principales
const formPantallaSignup = document.getElementById("signup");
const formPantallaLogin = document.getElementById("Login");
const pantallaMain = document.getElementById("main");
// definicion de estados
const mostrar = "block";
const ocultar = "none";
// alert success deny
const alertDiv = document.getElementById("alertDiv");
// obtención y asignación de botones
const btnOpcionSignup = document.getElementById("btnSignup");
const btnOpcionLogin = document.getElementById("btnLogin");
// obtención de boton de accion registrarse
const btnAccionSignup = document.getElementById("accionRegistrarse");
const btnAccionLogin = document.getElementById("accionLogin");
// obtención boton transferir
const btnAccionTransferir = document.getElementById("enviarTransferencia");
// definición de alertas
const danger = "danger";
const success = "success";
const warning = "warning";
const movimiento = "light";
const divNotis = document.getElementById("movimientosRecientes");
// inicialización de pantallas
formPantallaSignup.style.display = ocultar;
formPantallaLogin.style.display = ocultar;
pantallaMain.style.display = ocultar;

// opción elegida ingreso
const ingresar = btnOpcionLogin.addEventListener("click", () => {
  formPantallaLogin.style.display = mostrar;
  formPantallaSignup.style.display = ocultar;
});

// opción elegida registro
const registrarse = btnOpcionSignup.addEventListener("click", () => {
  formPantallaSignup.style.display = mostrar;
  formPantallaLogin.style.display = ocultar;
});


// definicion de mensajes de alerta
function alertMsg(type, msg) {
  return `<div class="alert alert-${type}" role="alert">${msg}</div>`;
}

/* ====================================
   === creación de listas y objetos ===
   ====================================
*/

// lista de usuarios
let usuarios = [];

/* ====================================
   ===           SIGNUP             ===
   ====================================
*/

// asignación de evento signup
btnAccionSignup.addEventListener("click", (event) => {
  let DNI = document.getElementById("DNI").value;
  let nombre = document.getElementById("name").value;
  let contraseña = document.getElementById("password").value;
  event.preventDefault();
  // Verifica si el DNI ya existe en la lista de usuarios
  for (let i = 0; i < usuarios.length; i++) {
    if (usuarios[i].DNI === DNI) {
      // si ya existe un DNI en la lista no es posible realizar el registro
      Swal.fire({
        icon: 'error',
        title: 'No fue posible realizar el registro',
        text: 'Ya existe una cuenta con ese DNI',
      })
      // Detener el registro
      return;
    }
  }
  // Crea un nuevo objeto "usuario"
  const usuario = new Usuario(DNI, nombre, contraseña);
  // Agregar el usuario a la lista si cumple condición
  if (
    DNI === "" ||
    DNI.length !== 8 ||
    nombre === "" ||
    contraseña === "" ||
    contraseña.length < 8
  ) {
    alertDiv.innerHTML = alertMsg(
      warning,
      `Por favor, complete todos los campos de forma correcta<br>
      <u>Recordá</u>
      <li>El DNI debe tener 8 dígitos</li>
      <li>La contraseña debe tener al menos 8 caractéres</li>`
    );
  } else {
    usuarios.push(usuario);

    cargarUsuariosALocalStorage();
    
    Swal.fire(
      'Registro exitoso',
      'Ya podés ingresar a tu cuenta',
      'success'
    )
  }
  DNI.value = ""
  nombre.value = ""
  contraseña.value = ""
});

// guarda user en usuarios en LS
function cargarUsuariosALocalStorage() {
  localStorage.setItem("usuarios", JSON.stringify(usuarios));
}
// trae user de usuarios en ls
function traerUsuariosdeLocalStorage() {
  const usuariosGuardados = localStorage.getItem("usuarios");
  if (usuariosGuardados) {
    usuarios = JSON.parse(usuariosGuardados);
    return usuarios
  } else {
    // si no esta guardado se inicializa vacio
    usuarios = [];
  }
  
}
function cargarSaldoAlStorage(u){
  localStorage.setItem("saldo", JSON.stringify(user.saldo));
}
// ==============================================================================

/* ====================================
   ===           lOGIN              ===
   ====================================
*/

// obtención de inputs Login

btnAccionLogin.addEventListener("click", (event) => {
  const DNILogin = document.getElementById("dniLogin").value;
  const passLogin = document.getElementById("passLogin").value;

  event.preventDefault();
  traerUsuariosdeLocalStorage(); // trae los usuarios de LS
  usuarios.forEach((usuario) => {
    if (usuario.DNI === DNILogin && usuario.contraseña === passLogin) {
      // esconde formularios
      esconderFormularios();
      // muestra pantalla principal
      mostrarPantallaPrincipal();
      // saluda
      saludo(usuario);
      // da regalo
      usuario.saldo = regaloNuevaCuenta(usuario);
      
      transferir(usuario)
    }
  });
});

// ================================================================




/* ====================================
   ===   funciones main account     ===
   ====================================
*/
function esconderFormularios() {
  formPantallaLogin.style.display = ocultar;
  btnOpcionLogin.style.display = ocultar;
  btnOpcionSignup.style.display = ocultar;
}

function mostrarPantallaPrincipal() {
  pantallaMain.style.display = mostrar;
}

function saludo(User) {
  let user = User;
  // ubica div "saludo"
  let divSaludo = document.getElementById("saludo");
  divSaludo.innerHTML = `<h1>Bienvenido ${user.nombre}</h1>`;
}

function muestraDineroActual(user) {
  let montoActual = user;
  let divMontoActual = document.getElementById("saldoActual");
  divMontoActual.innerHTML = `<div class="container monto">$${montoActual}</div>`;
  return montoActual.saldo;
}

function regaloNuevaCuenta(user) {
  let montoActual = user.saldo;
  montoActual = montoActual + 500;
  let notiRegalo = alertMsg(
    success,
    "Te regalamos $500 por registrarte con nosotros"
  );
  divNotis.innerHTML = notiRegalo;
  muestraDineroActual(montoActual);
  return montoActual;
}
function notificacionAlerta(icono, titulo, texto){
  Swal.fire({
    icon: icono,
    title: titulo,
    text: texto,
  })
}
/* ====================================
   ===        transferencias        ===
   ====================================
*/
// accion transferencia
function transferir(user){
  btnAccionTransferir.addEventListener("click", (event) => {
    let monto = parseInt(document.getElementById("monto").value);
    let destino = document.getElementById("alias").value;
    event.preventDefault();
    traerUsuariosdeLocalStorage()
    // **ERROR** campos de transferencia incompletos
    if (monto === "" || monto < 0 || destino === "") {
      alertDiv2.innerHTML = alertMsg(danger, "Los campos deben estar llenos");
    } else {
      // **ERROR** saldo insuficiente
      if (monto > user.saldo) {
        notificacionAlerta("error", "TRANSFERENCIA FALLIDA", "Saldo insuficiente")
      } else {
        // confirmación
        Swal.fire({
          title: 'TRANSFERENCIA',
          text: `Estás a punto de transferir $${monto} a ${destino}`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Si, transferir!'
          })
          .then((result) => {
            // se confirma
            if (result.isConfirmed) {
              //**SUCCESS** monto y destino correcto  
              user.saldo -= monto;
              // cargar a ls el saldo nuevo
              
              event.preventDefault();
              // Blanqueo de inputs
              monto.innerHTML = "";
              destino.innerHTML = "";
              // se crea el objeto operacion
              const operacion = {
              tipo: "Transferencia",
              destino: destino,
              monto: monto,
              };
              const listaDeOperaciones = user.operaciones;
              // se guarda en la lista de operaciones del usuario
              listaDeOperaciones.push(operacion);
              // Actualizar la lista de operaciones en el elemento "divNotis"
              let listaMovimientosRealizados = "<ul>";
              for (const operacion of listaDeOperaciones) {
                listaMovimientosRealizados += alertMsg(movimiento, `Enviaste una ${operacion.tipo} a <b>${operacion.destino}</b> por <span class ="montoDescontado">-$${operacion.monto}</span>`);
              }
              listaMovimientosRealizados += "</ul>";
              divNotis.innerHTML = listaMovimientosRealizados;
              muestraDineroActual(user.saldo);
              Swal.fire(
                'Excelente!',
                'La operación fue exitosa',
                'success'
              )
            }
        })
        
      }
    }
  });
}